(()=>{function i(i,n){return null!=i.find((i=>JSON.stringify(i)===JSON.stringify(n)))}class n{constructor(i,n){this.coords=[i,n],this.neighbouringMoves=[],this.partOfChain=!1,i+2<8&&n+1<8&&this.neighbouringMoves.push([i+2,n+1]),i+1<8&&n+2<8&&this.neighbouringMoves.push([i+1,n+2]),i-1>=0&&n+2<8&&this.neighbouringMoves.push([i-1,n+2]),i-2>=0&&n+1<8&&this.neighbouringMoves.push([i-2,n+1]),i-2>=0&&n-1>=0&&this.neighbouringMoves.push([i-2,n-1]),i-1>=0&&n-2>=0&&this.neighbouringMoves.push([i-1,n-2]),i+1<8&&n-2>=0&&this.neighbouringMoves.push([i+1,n-2]),i+2<8&&n-1>=0&&this.neighbouringMoves.push([i+2,n-1])}}let s=[];for(let i=0;i<8;i++)for(let o=0;o<8;o++){let r=new n(i,o);s.push(r)}function o(i,n){for(node of n)if(JSON.stringify(i)===JSON.stringify(node.coords))return node}var r;console.log(function n(t,e,h=[],g=[r]){let u=o(t,s),f=`${JSON.stringify(t)}`;for(v of(g.push(t),u.neighbouringMoves))if(JSON.stringify(v)===JSON.stringify(e))return u.partOfChain=!0,f+=` ${JSON.stringify(v)}`,f;for(v of u.neighbouringMoves)h.push(v);let p=h[0];h.shift();let l="";if(l+=n(p,e,h,g),l.includes(JSON.stringify(e))){for(v of u.neighbouringMoves){let n=o(v,s);if(i(g,v)&&!0===n.partOfChain)return u.partOfChain=!0,l=JSON.stringify(t)+l,l}return""+l}}(r=[0,0],[3,3]))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,