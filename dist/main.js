(()=>{let e=new class{constructor(e){this.numVertices=e,this.AdjList=new Map}addVertex(e){this.AdjList.set(e,[])}getVertex(e,t){for(let[o,s]of this.AdjList)if(e===o[0]&&t===o[1])return[o,s]}addEdge(e,t){this.AdjList.get(e).push(t)}printGraph(){let e=this.AdjList.keys();for(let t of e)this.AdjList.get(t);for(let e of getValues)conc+=e+" ";console.log(i+" -> "+conc)}}(64),t=[];for(let e=0;e<8;e++)for(let o=0;o<8;o++){let s=[e,o];t.push(s)}for(v of t)e.addVertex(v);for(v of t)if(v[0]+2<8&&v[1]+1<8){let t=e.getVertex(v[0]+2,v[1]+1)[0];console.log(t),e.addEdge(v,t)}console.log(e),console.log(e.getVertex(2,2)),console.log(e.getVertex(4,3)),function(t,o){let[s,l]=e.getVertex(t[0],t[1]);!function(t,o,s=[],l=[]){if(t!==o){{let[o,r]=e.getVertex(t[0],t[1]);s.push(o),l.push(o)}console.log(s)}}(s,[6,6])}([2,2])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,