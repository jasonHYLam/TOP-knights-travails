(()=>{function e(e,t){return null!=e.find((e=>JSON.stringify(e)===JSON.stringify(t)))}let t=new class{constructor(e){this.numVertices=e,this.AdjList=new Map}addVertex(e){this.AdjList.set(e,[])}getVertex(e,t){for(let[v,i]of this.AdjList)if(e===v[0]&&t===v[1])return[v,i]}addEdge(e,t){this.AdjList.get(e).push(t)}printGraph(){let e=this.AdjList.keys();for(let t of e)this.AdjList.get(t);for(let e of getValues)conc+=e+" ";console.log(i+" -> "+conc)}}(64),r=[];for(let e=0;e<8;e++)for(let t=0;t<8;t++){let v=[e,t];r.push(v)}for(v of r)t.addVertex(v);for(v of r){if(v[0]+2<8&&v[1]+1<8){let e=t.getVertex(v[0]+2,v[1]+1)[0];t.addEdge(v,e)}if(v[0]+1<8&&v[1]+2<8){let e=t.getVertex(v[0]+1,v[1]+2)[0];t.addEdge(v,e)}if(v[0]-1>=0&&v[1]+2<8){let e=t.getVertex(v[0]-1,v[1]+2)[0];t.addEdge(v,e)}if(v[0]-2>=0&&v[1]+1<8){let e=t.getVertex(v[0]-2,v[1]+1)[0];t.addEdge(v,e)}if(v[0]-2>=0&&v[1]-1>=0){let e=t.getVertex(v[0]-2,v[1]-1)[0];t.addEdge(v,e)}if(v[0]-1>=0&&v[1]-2>=0){let e=t.getVertex(v[0]-1,v[1]-2)[0];t.addEdge(v,e)}if(v[0]+1<8&&v[1]-2>=0){let e=t.getVertex(v[0]+1,v[1]-2)[0];t.addEdge(v,e)}if(v[0]+2<8&&v[1]-1>=0){let e=t.getVertex(v[0]+2,v[1]-1)[0];t.addEdge(v,e)}}function d(i,r){let[d,f]=t.getVertex(i[0],i[1]);return function i(r,d,f=[r],o=[]){let s=t.getVertex(r[0],r[1])[1];for(v of s)if(JSON.stringify(v)===JSON.stringify(d))return f.push(d),void console.log(f);for(v of s)if(!e(f,v)){let e=t.getVertex(v[0],v[1])[0];f.push(e),o.push(e)}let g=o[0];console.log(g),o.shift(),i(g,d,f,o)}(d,r,[d])}d([0,2],[3,5]),d([3,3],[0,0])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,