(()=>{const l=new class{constructor(l,n){return this.position=[l,n],this.col=l,this.row=n,this.uur=null,this.urr=null,this.drr=null,this.ddr=null,this.ddl=null,this.dll=null,this.ull=null,this.uul=null,this.position}}(2,2);console.log(l);const n=[2,2];!function l(u=n){if(node.col<0||node.col>7||node.row<0||node.row>7)return null;node.uur=u[0]+2<8||u[1]+1<8?l(u[0]+2,u[1]):null,node.urr=u[0]+1<8||u[1]+2<8?l(u[0]+1,u[1]):null,node.drr=u[0]-1<8||u[1]+2>0?l(u[0]-1,u[1]):null,node.ddr=u[0]-1<8||u[1]+1>0?l(u[0]-1,u[1]):null,node.ddl=u[0]-2>0||u[1]-1>0?l(u[0]-2,u[1]):null,node.dll=u[0]-1>0||u[1]-2>0?l(u[0]-1,u[1]):null,node.ull=u[0]+1>0||u[1]-2<8?l(u[0]+1,u[1]):null,node.uul=u[0]+2>0||u[1]-1<8?l(u[0]+2,u[1]):null}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,