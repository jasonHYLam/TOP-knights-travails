(()=>{function e(e,t){return null!=e.find((e=>JSON.stringify(e)===JSON.stringify(t)))}let t=new class{constructor(e){this.numVertices=e,this.AdjList=new Map}addVertex(e){this.AdjList.set(e,[])}getVertex(e,t){for(let[v,i]of this.AdjList)if(e===v[0]&&t===v[1])return[v,i]}addEdge(e,t){this.AdjList.get(e).push(t)}printGraph(){let e=this.AdjList.keys();for(let t of e)this.AdjList.get(t);for(let e of getValues)conc+=e+" ";console.log(i+" -> "+conc)}}(64),r=[];for(let e=0;e<8;e++)for(let t=0;t<8;t++){let v=[e,t];r.push(v)}for(v of r)t.addVertex(v);for(v of r){if(v[0]+2<8&&v[1]+1<8){let e=t.getVertex(v[0]+2,v[1]+1)[0];t.addEdge(v,e)}if(v[0]+1<8&&v[1]+2<8){let e=t.getVertex(v[0]+1,v[1]+2)[0];t.addEdge(v,e)}if(v[0]-1>=0&&v[1]+2<8){let e=t.getVertex(v[0]-1,v[1]+2)[0];t.addEdge(v,e)}if(v[0]-2>=0&&v[1]+1<8){let e=t.getVertex(v[0]-2,v[1]+1)[0];t.addEdge(v,e)}if(v[0]-2>=0&&v[1]-1>=0){let e=t.getVertex(v[0]-2,v[1]-1)[0];t.addEdge(v,e)}if(v[0]-1>=0&&v[1]-2>=0){let e=t.getVertex(v[0]-1,v[1]-2)[0];t.addEdge(v,e)}if(v[0]+1<8&&v[1]-2>=0){let e=t.getVertex(v[0]+1,v[1]-2)[0];t.addEdge(v,e)}if(v[0]+2<8&&v[1]-1>=0){let e=t.getVertex(v[0]+2,v[1]-1)[0];t.addEdge(v,e)}}var d;!function i(r,f,s=[d],g=[]){let o=`${JSON.stringify(r)}`,l=t.getVertex(r[0],r[1])[1];for(v of l)if(JSON.stringify(v)===JSON.stringify(f))return s.push(f),o+=` ${JSON.stringify(v)}`,console.log(o),o;for(v of l)if(!e(s,v)){let e=t.getVertex(v[0],v[1])[0];s.push(e),g.push(e)}let n=g[0];return g.shift(),o+=i(n,f,s,g),console.log(o),i(n,f,s,g)}(d=[3,3],[0,0])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,