(()=>{function o(o,i){return null!=o.find((o=>JSON.stringify(o)===JSON.stringify(i)))}class i{constructor(o,i){this.coords=[o,i],this.neighbouringMoves=[],this.partOfChain=!1,this.previousPosition=null,o+2<8&&i+1<8&&this.neighbouringMoves.push([o+2,i+1]),o+1<8&&i+2<8&&this.neighbouringMoves.push([o+1,i+2]),o-1>=0&&i+2<8&&this.neighbouringMoves.push([o-1,i+2]),o-2>=0&&i+1<8&&this.neighbouringMoves.push([o-2,i+1]),o-2>=0&&i-1>=0&&this.neighbouringMoves.push([o-2,i-1]),o-1>=0&&i-2>=0&&this.neighbouringMoves.push([o-1,i-2]),o+1<8&&i-2>=0&&this.neighbouringMoves.push([o+1,i-2]),o+2<8&&i-1>=0&&this.neighbouringMoves.push([o+2,i-1])}}let n=[];for(let o=0;o<8;o++)for(let s=0;s<8;s++){let e=new i(o,s);n.push(e)}function s(o,i){for(node of i)if(JSON.stringify(o)===JSON.stringify(node.coords))return node}console.log(function i(e,t,r=[],u=[],g){let h=s(e,n);g=h.previousPosition,console.log("current node"),console.log(h.coords),console.log(e),console.log(h);let l="";for(v of(u.push(e),h.neighbouringMoves))if(JSON.stringify(v)===JSON.stringify(t))return u.push(t),h.partOfChain=!0,l=`${JSON.stringify(e)}${JSON.stringify(v)}`,[l,g];for(v of(console.log("neighbours"),h.neighbouringMoves)){let i=s(v,n);i.previousPosition=e,console.log(i),o(u,v)||(u.push(v),r.push(v))}console.log(" ");let f=r[0];r.shift();let c=null,p=null;if([c,p]=i(f,t,r,u,g),l+=c,(g=p)===e){let o=s(g,n);console.log(o),g=o.previousPosition,l=JSON.stringify(e)+l;let i=[l,g];return console.log(i),[l,g]}return[""+l,g]}([4,3],[0,0]))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,