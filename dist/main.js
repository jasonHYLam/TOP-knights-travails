(()=>{function i(i,o){return null!=i.find((i=>JSON.stringify(i)===JSON.stringify(o)))}class o{constructor(i,o){this.coords=[i,o],this.neighbouringMoves=[],this.previousPosition=null,i+2<8&&o+1<8&&this.neighbouringMoves.push([i+2,o+1]),i+1<8&&o+2<8&&this.neighbouringMoves.push([i+1,o+2]),i-1>=0&&o+2<8&&this.neighbouringMoves.push([i-1,o+2]),i-2>=0&&o+1<8&&this.neighbouringMoves.push([i-2,o+1]),i-2>=0&&o-1>=0&&this.neighbouringMoves.push([i-2,o-1]),i-1>=0&&o-2>=0&&this.neighbouringMoves.push([i-1,o-2]),i+1<8&&o-2>=0&&this.neighbouringMoves.push([i+1,o-2]),i+2<8&&o-1>=0&&this.neighbouringMoves.push([i+2,o-1])}}let s=[];for(let i=0;i<8;i++)for(let n=0;n<8;n++){let e=new o(i,n);s.push(e)}function n(i,o){for(node of o)if(JSON.stringify(i)===JSON.stringify(node.coords))return node}console.log(function o(e,r,t=[],u=[]){let g=n(e,s),h=g.previousPosition,f="";for(v of(u.push(e),g.neighbouringMoves))if(JSON.stringify(v)===JSON.stringify(r))return console.log("turning point reached"),u.push(r),f=`${JSON.stringify(e)}${JSON.stringify(v)}`,[f,h];for(v of g.neighbouringMoves)n(v,s).previousPosition=e,i(u,v)||(u.push(v),t.push(v));let l=t[0];t.shift();let p=null;return[p,h]=o(l,r,t,u),f+=p,JSON.stringify(e)===JSON.stringify(u[0])&&(h=e),h===e?(h=n(h,s).previousPosition,f=JSON.stringify(e)+f,console.log(e),console.log(h),[f,h]):[""+f,h]}([0,0],[7,7]))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,