(()=>{let e=new class{constructor(e){this.numVertices=e,this.AdjList=new Map}addVertex(e){this.AdjList.set(e,[])}getVertex(e,t){for(let[v,d]of this.AdjList)if(e===v[0]&&t===v[1])return v}addEdge(e,t){this.AdjList.get(e).push(t),this.AdjList.get(t).push(e)}printGraph(){let e=this.AdjList.keys();for(let t of e)this.AdjList.get(t);for(let e of getValues)conc+=e+" ";console.log(i+" -> "+conc)}}(64),t=[];for(let e=0;e<8;e++)for(let v=0;v<8;v++){let d=[e,v];t.push(d)}for(v of t)e.addVertex(v);for(v of t){if(v[0]+2<8&&v[1]+1<8){let t=e.getVertex(v[0]+2,v[1]+1);e.addEdge(v,t)}if(v[0]+1<8&&v[1]+2<8){let t=e.getVertex(v[0]+1,v[1]+2);e.addEdge(v,t)}if(v[0]-1>=0&&v[1]+2<8){let t=e.getVertex(v[0]-1,v[1]+2);e.addEdge(v,t)}if(v[0]-2>=0&&v[1]+1<8){let t=e.getVertex(v[0]-2,v[1]+1);e.addEdge(v,t)}if(v[0]-2>=0&&v[1]-1>=0){let t=e.getVertex(v[0]-2,v[1]-1);e.addEdge(v,t)}if(v[0]-1>=0&&v[1]-2>=0){let t=e.getVertex(v[0]-1,v[1]-2);e.addEdge(v,t)}if(v[0]+1<8&&v[1]-2>=0){let t=e.getVertex(v[0]+1,v[1]-2);e.addEdge(v,t)}if(v[0]+2<8&&v[1]-1>=0){let t=e.getVertex(v[0]+2,v[1]-1);e.addEdge(v,t)}}console.log(e)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,